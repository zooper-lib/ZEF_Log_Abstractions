// Mocks generated by Mockito 5.4.4 from annotations
// in zef_log_abstractions/test/logger_test.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'package:mockito/mockito.dart' as _i1;
import 'package:mockito/src/dummies.dart' as _i3;
import 'package:zef_log_abstractions/zef_log_abstractions.dart' as _i2;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

/// A class which mocks [LoggerAdapter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLoggerAdapter extends _i1.Mock implements _i2.LoggerAdapter {
  MockLoggerAdapter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void trace({
    required String? message,
    required StackTrace? stackTrace,
    required _i2.LogFormatter? formatter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #trace,
          [],
          {
            #message: message,
            #stackTrace: stackTrace,
            #formatter: formatter,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void debug({
    required String? message,
    required StackTrace? stackTrace,
    required _i2.LogFormatter? formatter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #debug,
          [],
          {
            #message: message,
            #stackTrace: stackTrace,
            #formatter: formatter,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void info({
    required String? message,
    required StackTrace? stackTrace,
    required _i2.LogFormatter? formatter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #info,
          [],
          {
            #message: message,
            #stackTrace: stackTrace,
            #formatter: formatter,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void warning({
    required String? message,
    required StackTrace? stackTrace,
    required _i2.LogFormatter? formatter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #warning,
          [],
          {
            #message: message,
            #stackTrace: stackTrace,
            #formatter: formatter,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void error({
    required String? message,
    required String? error,
    required StackTrace? stackTrace,
    required _i2.LogFormatter? formatter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #error,
          [],
          {
            #message: message,
            #error: error,
            #stackTrace: stackTrace,
            #formatter: formatter,
          },
        ),
        returnValueForMissingStub: null,
      );

  @override
  void fatal({
    required String? message,
    required String? error,
    required StackTrace? stackTrace,
    required _i2.LogFormatter? formatter,
  }) =>
      super.noSuchMethod(
        Invocation.method(
          #fatal,
          [],
          {
            #message: message,
            #error: error,
            #stackTrace: stackTrace,
            #formatter: formatter,
          },
        ),
        returnValueForMissingStub: null,
      );
}

/// A class which mocks [LogFormatter].
///
/// See the documentation for Mockito's code generation for more information.
class MockLogFormatter extends _i1.Mock implements _i2.LogFormatter {
  MockLogFormatter() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String format({
    required _i2.LogLevel? level,
    required String? message,
    required DateTime? timestamp,
    String? error,
    StackTrace? stackTrace,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #format,
          [],
          {
            #level: level,
            #message: message,
            #timestamp: timestamp,
            #error: error,
            #stackTrace: stackTrace,
          },
        ),
        returnValue: _i3.dummyValue<String>(
          this,
          Invocation.method(
            #format,
            [],
            {
              #level: level,
              #message: message,
              #timestamp: timestamp,
              #error: error,
              #stackTrace: stackTrace,
            },
          ),
        ),
      ) as String);
}
